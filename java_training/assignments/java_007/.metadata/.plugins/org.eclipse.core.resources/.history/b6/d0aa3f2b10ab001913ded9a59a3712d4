package gameofdice;

import javax.swing.*;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.Scanner;

public class gdGrid implements ActionListener {
	  private JFrame mainFrame;
	  private JLabel headerLabel;
	  private JLabel statusLabel;
	  private JPanel controlPanel;
	  static int gameCounter = 0;

	   public gdGrid(){
	      prepareGUI();
	   }
	   
	   private void prepareGUI(){
	      mainFrame = new JFrame("Head or Tail");
	      mainFrame.setSize(600,400);
	      mainFrame.setLayout(new GridLayout(3, 1));
	      headerLabel = new JLabel("",JLabel.CENTER );
	      statusLabel = new JLabel("",JLabel.CENTER);        
	      statusLabel.setSize(350,100);
	      
	      // old school way to close a window
	      mainFrame.addWindowListener(new WindowAdapter() {
	         public void windowClosing(WindowEvent windowEvent){
	        	 if (gameCounter > 0) {
	        		 System.out.println("Thanks for being a sport! laters!");	 
	        	 } else {
	        		 System.out.println("See ya later alligator!");
	        	 }
	             // this is the way to force a java application to gracefully exit
	        	 // when not going to end via the main method entry point
	        	 System.exit(0);
	         }        
	      });    
	      controlPanel = new JPanel();
	      controlPanel.setLayout(new FlowLayout());

	      mainFrame.add(headerLabel);
	      mainFrame.add(controlPanel);
	      mainFrame.add(statusLabel);
	      mainFrame.setVisible(true);  
	   }
	   //Create the layout for the game space
	   private void showGridLayoutDemo() throws NullPointerException {
	      headerLabel.setText("Welcome to the dice throw challenge!\\nDo you feel lucky? Punk… Do ya?");      
	      statusLabel.setText("waiting...");
	      JPanel panel = new JPanel();
	      panel.setSize(300,300);
	      GridLayout layout = new GridLayout(2,3);
	      layout.setHgap(10);
	      layout.setVgap(10);
	      panel.setLayout(layout);
	      //add the flip and reset buttons
	      JButton flip = new JButton("Click to Roll!");
	      JButton reset = new JButton("Reset");
	      flip.addActionListener(this);
	      reset.addActionListener(this);
	      panel.add(flip);
	      panel.add(reset);
	      
	      controlPanel.add(panel);
	      mainFrame.setVisible(true);  
	   }
	   //Check which button is pressed and perform necessary tasks based on that selection
	   public void actionPerformed(ActionEvent ae) {
			play gamePlay = () -> {
				int playerDie1 = dieRoll();					//rolling player dice
				int playerDie2 = dieRoll();
				int eDie1 = dieRoll();						//rolling computer dice
				int eDie2 = dieRoll();
				int playerTotal = playerDie1 + playerDie2;			//get totals of dice
				int eTotal = eDie1 + eDie2;
				String pTag = getTag(playerDie1, playerDie2);		//get tag lines for dice rolls
				String eTag = getTag(eDie1, eDie2);
				
				//displaying results
				System.out.println("You have rolled " + playerDie1 + " and " + playerDie2 + " > the " + pTag);
				System.out.println("I have rolled " + eDie1 + " and " + eDie2 + " > the " + eTag);
				
				//checking for the winner and loser
				if (playerTotal > eTotal) {
					System.out.print("You Win!!!\nDid you cheat?? Gimme another try, c’mon ");
				} else if (eTotal > playerTotal) {
					System.out.print("I Win!!!\nWanna try again? ");
				} else if (playerTotal == eTotal) {							//on a tie a check for doubles is performed
					int pDCheck = doublesCheck(playerDie1, playerDie2);
					int eDCheck = doublesCheck(eDie1, eDie2);
					if (pDCheck == 1 & eDCheck == 0) {						//the double check also checks that the other player does not have a double
						System.out.print("Damn! You win on a Double! What Luck!\nDid you cheat?? Gimme another try, c’mon ");
					} else if (eDCheck == 1 & pDCheck == 0) {
						System.out.print("Damn! I win on a Double! Ah! I pity you fool!\nWanna try again? ");
					} else {
						System.out.print("Stalemate! You’re tough, let’s try for a tie-breaker ");
					}
				}
			};
		   String checker = ae.getActionCommand();
		   if (checker.equals("Click to Flip!")) {
			   gameCounter++;
			   gamePlay.game();
			   
			   //statusLabel.setText("The coin flip is " + coinFace);
			   headerLabel.setText("Would you like to play again?");
		   } else if (checker.equals("Reset")) {
		      headerLabel.setText("Welcome to the dice throw challenge!\\nDo you feel lucky? Punk… Do ya?");      
		      statusLabel.setText("waiting...");
		   }
	   }
	   
		public static void main(String[] args) {	
			SwingUtilities.invokeLater(new Runnable() {
				public void run() {
					gdGrid gridLayoutDemo = new gdGrid();  
				    gridLayoutDemo.showGridLayoutDemo();
				}
			});
			String input = null;
			Scanner console = new Scanner(System.in);				//initializing Scanner for user input
			
			input = console.nextLine();
			if (input.equalsIgnoreCase("q")){				//checking user input
				System.out.println("See ya later alligator!");
			} else {
				//gamePlay.game();
			}
			while (!input.equalsIgnoreCase("q")) {		//allowing user to continue the program until they quit
			input =	playAgain(input);
			}
		}
		//generate a random int from 1-6
		public static int dieRoll() {								//generates and returns random number of 1 or 6
			double rand = Math.floor((Math.random() * 6) + 1);
			return (int)rand;
		}
		//take values and return a String of results
		public static String getOutputLine(String roller int die1, int die2, String tag) {
			String outputLine = roller + " have rolled " + die1 + " and " + die2 + " > the " + tag;
			return outputLine;
		}
		
		public static String getTag(int check1, int check2) {
			String[][] multi = new String[][] {										//initializing the string matrix
				{ "", "1", "2", "3", "4", "5", "6" },
				{ "1", "Snake Eyes", "Australian Yo", "Little Joe From Kokomo", "No field five", "Easy Six", "Six one you're done" },
				{ "2", "Ace caught a deuce", "Ballerina", "The Fever", "Jimmie Hicks", "Benny Blue", "Easy Eight" },
				{ "3", "Easy Four", "OJ", "Brooklyn Fores", "Big Red", "Eighter from Decatur", "Nina from Pasadena" },
				{ "4", "Little Phoebe", "Easy Six", "Skinny McKinney", "Square Pair", "Railroad nine", "Big one on the end" },
				{ "5", "Sixic from Dixie", "Skinny Dugan", "Easy Eight", "Jesse James", "Puppy paws", "Yo" },
				{ "6", "The Devil", "Easy Eight", "Lou Brown", "Tennessee", "Six five no jive", "Midnight" }
			};
			return multi[check1][check2];										//return tag line for dice roll
		}
		

		
		public static int doublesCheck(int check1, int check2) {			//doubles check returns a value for later purpose
			if (check1 == check2) {
				return 1;
			} else {
				return 0;
			} 
		}
		
		public static String playAgain(String input) {
			Scanner console = new Scanner(System.in);				//initializing Scanner for user input
			
			input = console.nextLine();
			if (input.equalsIgnoreCase("q")) {			//checking user input
				System.out.println("Thanks for being a sport! laters!");
			} else {
				//gamePlay();
			}
			return input;
		}
}